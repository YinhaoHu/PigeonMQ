// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PorageService_CreateLedger_FullMethodName        = "/porageservice.PorageService/CreateLedger"
	PorageService_AppendEntryOnLedger_FullMethodName = "/porageservice.PorageService/AppendEntryOnLedger"
	PorageService_GetEntryFromLedger_FullMethodName  = "/porageservice.PorageService/GetEntryFromLedger"
	PorageService_DeleteLedger_FullMethodName        = "/porageservice.PorageService/DeleteLedger"
	PorageService_LedgerLength_FullMethodName        = "/porageservice.PorageService/LedgerLength"
	PorageService_ListLedgers_FullMethodName         = "/porageservice.PorageService/ListLedgers"
	PorageService_ListWorkers_FullMethodName         = "/porageservice.PorageService/ListWorkers"
)

// PorageServiceClient is the client API for PorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PorageServiceClient interface {
	// CreateLedger creates a new ledger. If a ledger with the same ID already exists, error is returned.
	CreateLedger(ctx context.Context, in *CreateLedgerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AppendEntryOnLedger appends an entry to the ledger.
	AppendEntryOnLedger(ctx context.Context, in *AppendEntryOnLedgerRequest, opts ...grpc.CallOption) (*AppendEntryOnLedgerResponse, error)
	// GetEntryFromLedger retrieves an entry from the ledger.
	GetEntryFromLedger(ctx context.Context, in *GetEntryFromLedgerRequest, opts ...grpc.CallOption) (*GetEntryFromLedgerResponse, error)
	// DeleteLedger closes a ledger.
	DeleteLedger(ctx context.Context, in *DeleteLedgerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LedgerLength returns the length of the ledger.
	LedgerLength(ctx context.Context, in *LedgerLengthRequest, opts ...grpc.CallOption) (*LedgerLengthResponse, error)
	// ListLedgers lists all the ledgers.
	ListLedgers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLedgersResponse, error)
	// ListWorkers lists all the workers.
	ListWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListWorkersResponse, error)
}

type porageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPorageServiceClient(cc grpc.ClientConnInterface) PorageServiceClient {
	return &porageServiceClient{cc}
}

func (c *porageServiceClient) CreateLedger(ctx context.Context, in *CreateLedgerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PorageService_CreateLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) AppendEntryOnLedger(ctx context.Context, in *AppendEntryOnLedgerRequest, opts ...grpc.CallOption) (*AppendEntryOnLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntryOnLedgerResponse)
	err := c.cc.Invoke(ctx, PorageService_AppendEntryOnLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) GetEntryFromLedger(ctx context.Context, in *GetEntryFromLedgerRequest, opts ...grpc.CallOption) (*GetEntryFromLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntryFromLedgerResponse)
	err := c.cc.Invoke(ctx, PorageService_GetEntryFromLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) DeleteLedger(ctx context.Context, in *DeleteLedgerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PorageService_DeleteLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) LedgerLength(ctx context.Context, in *LedgerLengthRequest, opts ...grpc.CallOption) (*LedgerLengthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerLengthResponse)
	err := c.cc.Invoke(ctx, PorageService_LedgerLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) ListLedgers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLedgersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLedgersResponse)
	err := c.cc.Invoke(ctx, PorageService_ListLedgers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porageServiceClient) ListWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, PorageService_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PorageServiceServer is the server API for PorageService service.
// All implementations must embed UnimplementedPorageServiceServer
// for forward compatibility.
type PorageServiceServer interface {
	// CreateLedger creates a new ledger. If a ledger with the same ID already exists, error is returned.
	CreateLedger(context.Context, *CreateLedgerRequest) (*emptypb.Empty, error)
	// AppendEntryOnLedger appends an entry to the ledger.
	AppendEntryOnLedger(context.Context, *AppendEntryOnLedgerRequest) (*AppendEntryOnLedgerResponse, error)
	// GetEntryFromLedger retrieves an entry from the ledger.
	GetEntryFromLedger(context.Context, *GetEntryFromLedgerRequest) (*GetEntryFromLedgerResponse, error)
	// DeleteLedger closes a ledger.
	DeleteLedger(context.Context, *DeleteLedgerRequest) (*emptypb.Empty, error)
	// LedgerLength returns the length of the ledger.
	LedgerLength(context.Context, *LedgerLengthRequest) (*LedgerLengthResponse, error)
	// ListLedgers lists all the ledgers.
	ListLedgers(context.Context, *emptypb.Empty) (*ListLedgersResponse, error)
	// ListWorkers lists all the workers.
	ListWorkers(context.Context, *emptypb.Empty) (*ListWorkersResponse, error)
	mustEmbedUnimplementedPorageServiceServer()
}

// UnimplementedPorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPorageServiceServer struct{}

func (UnimplementedPorageServiceServer) CreateLedger(context.Context, *CreateLedgerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedger not implemented")
}
func (UnimplementedPorageServiceServer) AppendEntryOnLedger(context.Context, *AppendEntryOnLedgerRequest) (*AppendEntryOnLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntryOnLedger not implemented")
}
func (UnimplementedPorageServiceServer) GetEntryFromLedger(context.Context, *GetEntryFromLedgerRequest) (*GetEntryFromLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryFromLedger not implemented")
}
func (UnimplementedPorageServiceServer) DeleteLedger(context.Context, *DeleteLedgerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLedger not implemented")
}
func (UnimplementedPorageServiceServer) LedgerLength(context.Context, *LedgerLengthRequest) (*LedgerLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerLength not implemented")
}
func (UnimplementedPorageServiceServer) ListLedgers(context.Context, *emptypb.Empty) (*ListLedgersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLedgers not implemented")
}
func (UnimplementedPorageServiceServer) ListWorkers(context.Context, *emptypb.Empty) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedPorageServiceServer) mustEmbedUnimplementedPorageServiceServer() {}
func (UnimplementedPorageServiceServer) testEmbeddedByValue()                       {}

// UnsafePorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PorageServiceServer will
// result in compilation errors.
type UnsafePorageServiceServer interface {
	mustEmbedUnimplementedPorageServiceServer()
}

func RegisterPorageServiceServer(s grpc.ServiceRegistrar, srv PorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PorageService_ServiceDesc, srv)
}

func _PorageService_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_CreateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).CreateLedger(ctx, req.(*CreateLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_AppendEntryOnLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryOnLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).AppendEntryOnLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_AppendEntryOnLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).AppendEntryOnLedger(ctx, req.(*AppendEntryOnLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_GetEntryFromLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryFromLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).GetEntryFromLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_GetEntryFromLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).GetEntryFromLedger(ctx, req.(*GetEntryFromLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_DeleteLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).DeleteLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_DeleteLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).DeleteLedger(ctx, req.(*DeleteLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_LedgerLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).LedgerLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_LedgerLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).LedgerLength(ctx, req.(*LedgerLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_ListLedgers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).ListLedgers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_ListLedgers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).ListLedgers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorageService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorageServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PorageService_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorageServiceServer).ListWorkers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PorageService_ServiceDesc is the grpc.ServiceDesc for PorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "porageservice.PorageService",
	HandlerType: (*PorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedger",
			Handler:    _PorageService_CreateLedger_Handler,
		},
		{
			MethodName: "AppendEntryOnLedger",
			Handler:    _PorageService_AppendEntryOnLedger_Handler,
		},
		{
			MethodName: "GetEntryFromLedger",
			Handler:    _PorageService_GetEntryFromLedger_Handler,
		},
		{
			MethodName: "DeleteLedger",
			Handler:    _PorageService_DeleteLedger_Handler,
		},
		{
			MethodName: "LedgerLength",
			Handler:    _PorageService_LedgerLength_Handler,
		},
		{
			MethodName: "ListLedgers",
			Handler:    _PorageService_ListLedgers_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _PorageService_ListWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
